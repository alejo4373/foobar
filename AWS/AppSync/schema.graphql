type PaginatedEvents {
  events: [Event!]
  nextToken: String
}

type PaginatedEstablishments {
  establishments: [Establishment!]
  nextToken: String
}

type EstablishmentSearchResults {
  hits: [Establishment!]
}

type EventSearchResults {
  hits: [Event!]
}

type Location {
	lat: String!
	lon: String!
}

input LocationInput {
	lat: String!
	lon: String!
}

type Event {
  id: ID
  atEstablishmentId: String!
  awayTeam: String!
  awayTeamBadge: String
  homeTeam: String!
  homeTeamBadge: String
  leagueId: String!
  sportsDbId: String
  startTime: String!
  coverCharge: Boolean!
  description: String
}

type Establishment {
  id: ID
  managerUsername: String 
  googlePlaceId: String!
  googlePhotoReference: String
  name: String!
  displayName: String
  address: String!
  phone: String
  location: Location!
}

type Mutation {
  putEvent(
    id: ID,
    atEstablishmentId: String!
    awayTeam: String!,
    awayTeamBadge: String
    homeTeam: String!,
    homeTeamBadge: String
    leagueId: String!,
    sportsDbId: String, 
    startTime: String!,
    coverCharge: Boolean!
    description: String
  ): Event

  putEstablishment(
    googlePlaceId: String!
    name: String!
    displayName: String!
    address: String!
    phone: String,
    location: LocationInput!
   ): Establishment
}

type Query {
  getEvents(limit: Int, nextToken: String, atEstablishmentId: String!): PaginatedEvents!
  getEstablishmentsUserManages(limit: Int, nextToken: String): PaginatedEstablishments!
  getEstablishmentById(id: String!): Establishment!
  getEstablishmentsInBounds(limit: Int, topLeft: LocationInput!, bottomRight: LocationInput!): EstablishmentSearchResults!
  searchEstablishments(name: String!): EstablishmentSearchResults!
  searchEvents(pattern: String!): EventSearchResults!
}
