type PaginatedEvents {
  events: [Event!]!
  nextToken: String
}

type PaginatedEstablishments {
  establishments: [Establishment!]!
  nextToken: String
}

type Event {
  id: ID
  awayTeam: String!
  homeTeam: String!
  leagueId: String!
  sportsDbId: String!
  startTime: String!
}

type Establishment {
  id: ID
  managerUsername: String 
  googlePlaceId: String!
  name: String!
  address: String!
  phone: String!
  lat: String!
  lng: String!
}

type Mutation {
  #  If an item exists it's updated. If it does not it's created.
  putEvent(
    awayTeam: String!,
    homeTeam: String!,
    id: ID,
    leagueId: String!,
    sportsDbId: String!,
    startTime: String!
  ): Event

  putEstablishment(
    #id: ID # Handled in request mapping template, not requiered here
    #managerUsername: String!, # Handled in request mapping template, not requiered here
    googlePlaceId: String!
    name: String!
    address: String!
    phone: String!,
    lat: String!,
    lng: String!
   ): Establishment
}

type Query {
  allEvents(count: Int, nextToken: String): PaginatedEvents!
  allEstablishments(count: Int, nextToken: String): PaginatedEstablishments!
  #getUpcomingGamesFromEstablishments
}
